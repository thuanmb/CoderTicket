c
signed_in?
current_user
c
params
c
flash
c
event.published
event.ticket_types.count > 0
signed_in?
can_publish(event)
event.errors.full_messages
event.errors
n
event.ticket_types
c
event.id
c
Event.find(2371).ticket_types
params
event.ticket_types
c
Event.find(2356).ticket_types
Event.find(2356)
@upcomingEvent.ticket_types
@upcomingEvent
c
event.ticket_types
event.tick_types
event
c
Region
c
n
c
exception
n
@venue
c
@upcomingEvent
@upcomingEvent.id
c
n
c
params
c
exception
n
c
ticket_type
c
cc
c
current_user
c
current_user
self
c
Event.find(params[:id]).ticket_types
Event.find(params[:id]).category
Event.find(params[:id]).venue
Event.find(params[:id])
c
n
c
exception
n
c
exception
n
c
exception
n
c
exception
n
c
exception
n
params
c
params
c
params
c
params
c
params
c
params
c
@success_tickets[0].ticket_type
@success_tickets[0]
@success_tickets
c
@success_tickets
c
@success_tickets
params
c
success
params
c
n
c
n
c
n
c
exception
n
valid_tickets
c
n
type
c
n
"1".to_i
booked_tickets
c
params.require(:event)[:ticket_types]
params.require(:event).[:ticket_types]
params.require(:event).permit(:ticket_types)
params.require(:event)
params
booked_tickets
event
c
@event
event
params
c
Event.search(:name => "Upcoming")
Event.search("Upcoming")
Event.search("Upcomming")
n
params[:search]
params
c
params
c
params
c
params
c
Event.all
c
        :category => Category.new
        :extended_html_description => "Past event",
        :venue => Venue.new,
        :ends_at => 2.days.ago,
        :starts_at => 5.days.ago,
      @pastEvent = Event.create(
      )
        :category => Category.new
        :extended_html_description => "A upcoming event",
        :venue => Venue.new,
        :ends_at => 3.days.from_now,
        :starts_at => 3.days.ago,
@upcomingEvent = Event.create(
Event.all
assigns(:events).count
@upcomingEvent
assigns(:events)
